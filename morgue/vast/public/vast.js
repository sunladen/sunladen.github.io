( function () {

    'use strict';

    function animate( time ) {

        requestAnimationFrame( animate );

        _scene.update();

    }

    function scene( newscene ) {

        _scene.destroy();

        _scene = newscene;

        _scene.init();

    }

    let _scene = { update: () => {}, destroy: () => {} };

    animate( 0 );

    function Cell( x, y ) {

        let cell = {
            x: x,
            y: y,
            div: document.createElement( "div" )
        };

        cell.div.style.backgroundColor = "#eee";
        cell.div.style.border = "1px solid #ddd";
        document.body.appendChild( cell.div );

        return cell;

    }

    function copy( cell ) {

        let _cell = {
            x: cell.x,
            y: cell.y,
            div: cell.div
        };

        return _cell;

    }

    function generation( cell, generationInfo ) {

        let _cell = copy( cell );

        let shade = parseInt( ( generationInfo.iteration / 1000.0 ) * 255 );

        _cell.div.style.backgroundColor = "rgb( " + shade + ", " + shade + ", " + shade + " )";

        return _cell;

    }

    const world = {

        size: 50,
        cells: [],

        init: () => {

            world.cells = new Array( world.size * world.size );

            const CELL_SIZE = ( ( 1.0 / world.size ) * 100 ) + "%";

            for ( let y = 0; y < world.size; y ++ ) {

                for ( let x = 0; x < world.size; x ++ ) {

                    let cell = Cell( x, y );
                    world.cells[ y * world.size + x ] = cell;
                    cell.div.style.width = CELL_SIZE;
                    cell.div.style.height = CELL_SIZE;
                    cell.div.style.cssFloat = "left";

                }

            }

        },

        update: () => {

            let i = world.size * world.size;
            let cells = world.cells;
            let nextGeneration = [];

            generationInfo.iteration += 1;

            while ( i -- ) {

                nextGeneration[ i ] = generation( cells[ i ], generationInfo );

            }

            world.cells = nextGeneration;

        },

        destroy: () => {

        }

    };

    const generationInfo = {
        iteration: 0,
        elapsed: 0
    };

    scene( world );

}() );
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
